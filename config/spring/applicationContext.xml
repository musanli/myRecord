<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-lazy-init="true">
	
	<context:component-scan base-package="com.*.service" />
	<!-- 1、加载配置文件 
				同配置：<context:property-placeholder location="classpath:jdbc.properties" />-->
	
	<bean id= "propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件 -->
		<property name="locations"> 
			<array>
				<value>classpath:/jdbc.properties</value>
			</array>
		</property>
	</bean>
	
	<!-- 2、配置数据库连接器 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 数据库中保持的最小连接数 -->
		<property name="minPoolSize" value="${cpool.minPoolSize}"/>
		<!-- 数据库中保持的最大连接数 -->
		<property name="maxPoolSize" value="${cpool.maxPoolSize}"/>
		<!-- 最大空闲时间，若设置为0则永不遗弃 -->
		<property name="maxIdleTime" value="${cpool.maxIdleTime}"/>
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="${cpool.acquireIncrement}"/>
	</bean>

	<!-- 配置sqlsessionWEB配置项 -->
	<bean id="template"></bean>
	<!--3、配置SqlSessionFactory用Spring管理MyBatis 
			利用Spring来加载MyBatis的配置文件-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="configLocation" value="classpath:/myBatis/mybatis-config.xml"/>
		<property name="mapperLocations" value="classpath:com/*/dao/**/*.xml"></property>
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
		<!-- sqlSessionTemplate用来代替DefaultSqlSession  -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg  type="org.apache.ibatis.session.SqlSessionFactory" ref="sqlSessionFactory" />
       
	</bean>
	
	
	<!-- 4、利用Spring主动生成mybatis的Dao类
			将mybatis的接口直接转换为spring的bean-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.*.dao"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
	
	<!--5、配置Spring声明式事务 -->
	<!--5.1配置管理实务的类  -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!--5.2配置声明式事务的作用方法  -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes >
		<tx:method name="add*" propagation="REQUIRED"/>
		<tx:method name="delete*" propagation="REQUIRED"/>
		<tx:method name="save*" propagation="REQUIRED"/>
		<tx:method name="update*" propagation="REQUIRED"/>
		<tx:method name="select*" propagation="NEVER"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- SpringAOP编程 -->
	<!--5.2配置声明式事务作用位置  -->
	<aop:config >
		<aop:pointcut expression="execution(* com.main.comm.service..*.*(..))" id="myinterceptorPointCuts"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="myinterceptorPointCuts"/>
		<!-- 此处可以开启自己的SpringAOP编程 -->
	</aop:config>
	<!--5.3开启基于注解的事务管理  -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<!--  aop注解生效 。如果不写则不生效-->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
</beans>